"Tilt functions for building Go images with Bazel."

load("../../../docker.tilt", "image_entrypoint", "image_inspect")
load("../../private/action_graph.tilt", "bazel_exec_paths")
load("../../private/build.tilt", "bazel_build_with_restart")
load("../../private/docker.tilt", "bazel_image")
load("../../private/query.tilt", "bazel_aquery")

def _local_binary(target):
    # Query Bazel's action graph and parse the response.
    # The path is not necessarily predictable across bazel rulesets, or even
    # across releases of the same ruleset. Even configuration flags passed to
    # Bazel can affect the path.
    # See https://github.com/bazelbuild/rules_go/blob/dea7cd1/README.rst#how-do-i-access-go_binary-executables-from-go_test
    action_graph = bazel_aquery(target)
    exec_paths = bazel_exec_paths(
        action_graph,
        # If the image target is a Go binary, it will have a GoLink action.
        lambda a: a["mnemonic"] == "GoLink",
    )
    return exec_paths[0]

def _container_binary(target):
    # Inspect Go image to determine the binary location in the container.
    # This can also be determined by shelling into the container with
    # `kubectl exec -it [pod name] -- sh`.
    image_info = image_inspect(bazel_image(target))
    return image_entrypoint(image_info)[0]

def bazel_build_go(ref, target):
    """Build a Bazel Go image with live updates.

    Args:
        ref: A name for the image.

            If the image will be used in a k8s
            resource(s), this ref must match the spec.container.image param for
            that resource(s).
        target: The label of the Bazel image target.
    """
    binary_target = target + ".binary"
    local_path = _local_binary(binary_target)
    container_path = _container_binary(target)
    bazel_build_with_restart(
        live_update = [
            sync(local_path, container_path),
        ],
        ref = ref,
        target = target,
        deps = [local_path],
    )
