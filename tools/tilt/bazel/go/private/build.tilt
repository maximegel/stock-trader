"Tilt functions for building Go containers with Bazel."

load("../../../docker.tilt", "image_entrypoints", "image_inspect")
load("../../private/build.tilt", "bazel_build_with_restart")
load("../../private/docker.tilt", "bazel_image")
load("../../private/queries.tilt", "bazel_aquery")

def _link_actions(action_graph):
    # If the image target is a Go binary, it will have a GoLink action.
    return [
        action
        for action in action_graph["actions"]
        if action["mnemonic"] == "GoLink"
    ]

def _action_output_ids(action_graph):
    return [
        output_id
        for action in _link_actions(action_graph)
        for output_id in action["outputIds"]
    ]

def _exec_paths(action_graph):
    return [
        action["execPath"]
        for action in action_graph["artifacts"]
        if action["id"] in _action_output_ids(action_graph)
    ]

def _local_binary(target):
    # Query Bazel's action graph and parse the response.
    # The path is not necessarily predictable across bazel rulesets, or even
    # across releases of the same ruleset. Even configuration flags passed to
    # Bazel can affect the path.
    # See https://github.com/bazelbuild/rules_go/blob/dea7cd1/README.rst#how-do-i-access-go_binary-executables-from-go_test
    action_graph = bazel_aquery(target)
    exec_paths = _exec_paths(action_graph)
    return exec_paths[0]

def _container_binary(target):
    # Inspect Go image to determine the binary location in the container.
    # This can also be determined by shelling into the container with
    # `kubectl exec -it [pod name] -- sh`.
    container_info = image_inspect(bazel_image(target))
    return image_entrypoints(container_info)[0]

def bazel_build_go(ref, target):
    binary_target = target + ".binary"
    binary_local_path = _local_binary(binary_target)
    binary_container_path = _container_binary(target)
    bazel_build_with_restart(
        entrypoint = binary_container_path,
        live_update = [
            sync(binary_local_path, binary_container_path),
        ],
        ref = ref,
        target = target,
        deps = [binary_local_path],
    )
